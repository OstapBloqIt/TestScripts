================================================================================
                        SYSTEM DESCRIPTION - CB2v4
                    iMX8M Mini Verdin SoM Platform
================================================================================

Last Updated: 2025-10-13
System Hostname: verdin-imx8mm-15692634

================================================================================
                          HARDWARE SPECIFICATIONS
================================================================================

PRIMARY HARDWARE
----------------
Device: Toradex Verdin iMX8M Mini SoM (System-on-Module)
Carrier Board: Custom carrier board for CB2v4 project
Architecture: ARM64 (aarch64)
Processor: NXP i.MX 8M Mini (Quad-core ARM Cortex-A53)

DISPLAY & INPUT
---------------
Display: 800x1280 resolution, portrait orientation
Touch: Touch-enabled (capacitive touch screen)
Input Method: Touch only (no mouse/keyboard)
Display Orientation: Portrait mode optimized

STORAGE & MEMORY
----------------
Operating from: SoM internal storage
User Directory: /home/torizon/
Current Working Dir: /home/CB2v4_validation/

================================================================================
                        OPERATING SYSTEM & SOFTWARE
================================================================================

OPERATING SYSTEM
----------------
OS: Torizon Core 6.8.1
Base: Debian-based container system
Kernel Version: 5.15.148-6.8.1-devel+git.1cbf48124747
Kernel Build: #1-TorizonCore SMP PREEMPT Thu Mar 20 08:21:31 UTC 2025
Compiler: aarch64-tdx-linux-gcc (GCC) 11.5.0, GNU ld 2.38.20220708

Full Kernel String:
Linux version 5.15.148-6.8.1-devel+git.1cbf48124747 (oe-user@oe-host)
(aarch64-tdx-linux-gcc (GCC) 11.5.0, GNU ld (GNU Binutils) 2.38.20220708)
#1-TorizonCore SMP PREEMPT Thu Mar 20 08:21:31 UTC 2025

CONTAINER ENVIRONMENT
---------------------
Running as: root (in Docker container)
Container Type: Torizon container with limited systemctl access
Package Manager: apt (Debian packages)
System Services: Limited container environment (no full systemctl)

================================================================================
                      GRAPHICS & DISPLAY STACK
================================================================================

COMPOSITOR & DISPLAY SERVER
----------------------------
Compositor: Weston (Wayland compositor)
Display Protocol: Wayland (not X11)
Display Variable: DISPLAY=:0

GPU & DRIVERS
-------------
GPU: NXP Vivante GPU
GPU Drivers: imx-gpu-viv-wayland
GPU Type: iMX integrated Vivante GPU

WORKING GRAPHICS FRAMEWORKS
----------------------------
✅ GTK3: Fully functional
   - Install: apt install libgtk-3-dev
   - Compile: gcc app.c -o app `pkg-config --cflags --libs gtk+-3.0`
   - Run: DISPLAY=:0 ./app

✅ Web Browsers: Chromium works perfectly
   - Kiosk mode supported
   - Command: DISPLAY=:0 chromium --kiosk --no-sandbox \
              --disable-dev-shm-usage --disable-gpu \
              --use-fake-ui-for-media-stream http://localhost:8000/

✅ Terminal Applications: Always work reliably

✅ Web Development:
   - Python HTTP server: python3 -m http.server 8000 --bind 127.0.0.1
   - Local HTML/CSS/JS applications work well

BROKEN/UNAVAILABLE GRAPHICS
----------------------------
❌ SDL2: COMPLETELY UNUSABLE - Causes bus errors and crashes
   - Do NOT attempt to use SDL2 in any form
   - Causes immediate system instability

❌ OpenGL/EGL Development Headers: UNAVAILABLE
   - Cannot install due to GPU driver package conflicts
   - Development headers conflict with imx-gpu-viv-wayland
   - Runtime OpenGL may work via Wayland, but dev headers unavailable

❌ Direct Framebuffer Access: NOT VISIBLE
   - /dev/fb0 exists but not usable
   - Weston compositor controls display output
   - Framebuffer writes not visible on screen

================================================================================
                      USB & PERIPHERAL HARDWARE
================================================================================

USB CONTROLLERS
---------------
Controller 0 (ci_hdrc.0): USB Bus 1, 480M capable (High-speed)
Controller 1 (ci_hdrc.1): USB Bus 2, 480M capable (High-speed)

USB TOPOLOGY
------------

USB Bus 1 (ci_hdrc.0):
└── Port 1: Quectel EC25 LTE Modem (VID: 2c7c, PID: 0125)
    ├── Interface 0: ttyUSB4 (GSM modem port, option driver)
    ├── Interface 1: ttyUSB5 (GSM modem port, option driver)
    ├── Interface 2: ttyUSB6 (GSM modem port, option driver)
    ├── Interface 3: ttyUSB7 (GSM modem port, option driver)
    └── Interface 4: qmi_wwan (LTE data interface)

USB Bus 2 (ci_hdrc.1):
└── Port 1: Microchip USB Hub (VID: 0424, PID: 2517)
    │   - 7-port hub
    │   - USB 2.0, TT per port
    │   - Bus powered, 100mA max
    │   - Remote wakeup capable
    │
    ├── Port 5: Silicon Labs CP2108 Quad UART Bridge (VID: 10c4, PID: ea71)
    │   │   Serial Number: FD37C601B8EDB8AB11EFF39371652BE
    │   │   Firmware Version: 1.90
    │   │   Max Power: 100mA
    │   │   Driver: cp210x (kernel module)
    │   │
    │   ├── Interface 0: ttyUSB0 → RS485 Channel 0
    │   │   Endpoints: EP 0x81 (IN), EP 0x01 (OUT), Bulk transfer, 64 bytes
    │   │
    │   ├── Interface 1: ttyUSB1 → RS485 Channel 1
    │   │   Endpoints: EP 0x82 (IN), EP 0x02 (OUT), Bulk transfer, 64 bytes
    │   │
    │   ├── Interface 2: ttyUSB2 → RS485 Channel 2
    │   │   Endpoints: EP 0x83 (IN), EP 0x03 (OUT), Bulk transfer, 64 bytes
    │   │
    │   └── Interface 3: ttyUSB3 → RS485 Channel 3
    │       Endpoints: EP 0x84 (IN), EP 0x04 (OUT), Bulk transfer, 64 bytes
    │
    └── Port 1: (Previously detected) CP2104 UART Bridge (VID: 10c4, PID: ea60)
        Status: Disconnected (was temporarily detected as ttyUSB8)
        Issue: Physical connection or power problem
        Note: Device enumerates but disconnects ~1 second later

AVAILABLE USB HUB PORTS
------------------------
Total Ports: 7
Used Ports: 1 (Port 5 with CP2108)
Available Ports: 6 unused ports for expansion

RS485 TRANSCEIVERS
------------------
Transceivers: 4x RS485 transceivers connected to CP2108
Purpose: Industrial serial communication (RS485 half-duplex)
Device Nodes: /dev/ttyUSB0, /dev/ttyUSB1, /dev/ttyUSB2, /dev/ttyUSB3

Device Paths:
- ttyUSB0: /sys/devices/platform/soc@0/32c00000.bus/32e50000.usb/ci_hdrc.1/usb2/2-1/2-1.5/2-1.5:1.0/ttyUSB0/tty/ttyUSB0
- ttyUSB1: /sys/devices/platform/soc@0/32c00000.bus/32e50000.usb/ci_hdrc.1/usb2/2-1/2-1.5/2-1.5:1.1/ttyUSB1/tty/ttyUSB1
- ttyUSB2: /sys/devices/platform/soc@0/32c00000.bus/32e50000.usb/ci_hdrc.1/usb2/2-1/2-1.5/2-1.5:1.2/ttyUSB2/tty/ttyUSB2
- ttyUSB3: /sys/devices/platform/soc@0/32c00000.bus/32e50000.usb/ci_hdrc.1/usb2/2-1/2-1.5/2-1.5:1.3/ttyUSB3/tty/ttyUSB3

All RS485 channels: ✅ OPERATIONAL

SERIAL DEVICE SUMMARY
---------------------
Total ttyUSB Devices: 8 (ttyUSB0-7)

RS485 Channels (CP2108):
- ttyUSB0: RS485 Channel 0 (cp210x driver)
- ttyUSB1: RS485 Channel 1 (cp210x driver)
- ttyUSB2: RS485 Channel 2 (cp210x driver)
- ttyUSB3: RS485 Channel 3 (cp210x driver)

LTE Modem Channels (Quectel EC25):
- ttyUSB4: Modem control port (option driver)
- ttyUSB5: Modem control port (option driver)
- ttyUSB6: Modem control port (option driver)
- ttyUSB7: Modem control port (option driver)

KERNEL DRIVERS
--------------
cp210x Driver:
- Module: cp210x.ko
- Size: 32768 bytes
- Location: /lib/modules/5.15.148-6.8.1-devel+git.1cbf48124747/kernel/drivers/usb/serial/cp210x.ko
- Description: Silicon Labs CP210x RS232 serial adaptor driver
- License: GPL v2
- Status: Loaded and bound to 4 interfaces

option Driver:
- Used for: GSM modem serial ports (Quectel EC25)
- Status: Loaded and bound to 4 interfaces

qmi_wwan Driver:
- Used for: LTE modem data interface
- Status: Loaded

================================================================================
                       DEVELOPMENT ENVIRONMENT
================================================================================

COMPILERS & TOOLCHAIN
---------------------
C Compiler: gcc (available)
C++ Compiler: g++ (available)
Python: python3 (Python 3.x available)
Build Tools: make, pkg-config available

DEVELOPMENT LIBRARIES
---------------------
✅ GTK3 Development: Available via apt install libgtk-3-dev
✅ Standard C libraries: Available
✅ Python 3 standard library: Available
❌ SDL2: DO NOT INSTALL - Will cause system instability
❌ OpenGL/EGL dev headers: Cannot install due to driver conflicts

RECOMMENDED DEVELOPMENT APPROACHES
-----------------------------------

1. GTK3 Applications (Best for Native GUI):
   sudo apt install libgtk-3-dev
   gcc myapp.c -o myapp `pkg-config --cflags --libs gtk+-3.0`
   DISPLAY=:0 ./myapp

2. Web Applications (Best for Complex UI):
   - Develop HTML/CSS/JavaScript
   - Serve via: python3 -m http.server 8000 --bind 127.0.0.1 &
   - Display: DISPLAY=:0 chromium --kiosk --no-sandbox \
              --disable-dev-shm-usage --disable-gpu \
              --use-fake-ui-for-media-stream http://127.0.0.1:8000/index.html &

3. Terminal/CLI Applications:
   - Always work reliably
   - No special display considerations needed

================================================================================
                          NETWORKING
================================================================================

LTE MODEM
---------
Device: Quectel EC25 LTE modem
Interfaces: 4x serial ports (ttyUSB4-7) + qmi_wwan data interface
Status: Hardware present and enumerated
Vendor ID: 2c7c
Product ID: 0125

NETWORK INTERFACES
------------------
(To be documented based on specific network configuration)

================================================================================
                    KNOWN ISSUES & LIMITATIONS
================================================================================

CRITICAL ISSUES
---------------
❌ SDL2 COMPLETELY BROKEN
   - Causes bus errors
   - System crashes on use
   - DO NOT ATTEMPT TO USE SDL2
   - No workaround available

❌ OpenGL/EGL Development Headers Unavailable
   - Package conflicts with imx-gpu-viv-wayland
   - Cannot install libgles2-mesa-dev or similar
   - Use Wayland-native APIs if needed

❌ Direct Framebuffer Not Visible
   - /dev/fb0 exists but Weston controls display
   - Writes to framebuffer not visible
   - Must use Wayland/GTK3/Web for graphics

❌ CP2104 Connection Instability
   - Device enumerates but disconnects quickly
   - Likely physical connection or power issue
   - Requires hardware troubleshooting

SYSTEM LIMITATIONS
------------------
⚠️ No systemctl Access
   - Limited container environment
   - Cannot control system services normally
   - Container-specific service management only

⚠️ Touch-Only Interface
   - No mouse/keyboard available
   - UI must be designed for touch input
   - Button sizes must be touch-friendly (portrait 800x1280)

⚠️ Portrait Display Orientation
   - 800x1280 resolution (portrait)
   - UI must be designed for vertical layout
   - Horizontal layouts not optimal

================================================================================
                      VALIDATION & TESTING TOOLS
================================================================================

USB/RS485 VALIDATION SCRIPT
----------------------------
Script: /home/CB2v4_validation/usb_rs485_validator.sh
Purpose: Automated USB and RS485 hardware validation
Usage: ./usb_rs485_validator.sh [output_report.md]

Features:
- Automatic USB device enumeration
- CP2108/CP2104 detection and validation
- RS485 channel verification
- USB hub configuration check
- Kernel driver status verification
- Comprehensive markdown report generation

Output:
- Console: Color-coded validation summary
- Report: Detailed markdown with topology, device info, and recommendations

Validation Checklist:
✅ CP2108 Quad UART Bridge detection
✅ USB Hub enumeration
✅ RS485 channels (ttyUSB0-3) operational status
⚠️ CP2104 presence (currently disconnected)
✅ Kernel driver loading and binding
✅ Device tree topology verification

VALIDATION BASELINE
--------------------
Initial Report: /home/CB2v4_validation/USB_RS485_Validation_Report.md
Date: 2025-10-13
Status: All RS485 channels operational, CP2104 disconnected

================================================================================
                        PROJECT DIRECTORY
================================================================================

Current Working Directory: /home/CB2v4_validation/

Files:
- usb_rs485_validator.sh (18KB) - Automated validation script
- USB_RS485_Validation_Report.md (18KB) - Initial baseline report
- README.md (4.6KB) - Validation tools documentation
- SYSTEM_DESCRIPTION.txt (This file) - Complete system description

================================================================================
                   IMPORTANT COMMANDS & SHORTCUTS
================================================================================

DISPLAY COMMANDS
----------------
# Check display environment
echo $DISPLAY                    # Should show :0

# List running Wayland/Weston processes
ps aux | grep weston

USB DEBUGGING
-------------
# List all USB devices
lsusb

# USB device tree with drivers
lsusb -t

# Detailed device info
lsusb -v -d 10c4:ea71           # CP2108
lsusb -v -d 10c4:ea60           # CP2104
lsusb -v -d 0424:2517           # USB Hub

# Check kernel messages
dmesg | grep -i cp210
dmesg | grep -i usb
dmesg | tail -50

SERIAL PORT COMMANDS
--------------------
# List serial devices
ls -la /sys/class/tty/ttyUSB*

# Find USB serial devices
find /sys/bus/usb-serial/devices/ -type l

# Check driver binding
ls -la /sys/bus/usb/devices/2-1.5:1.*/ttyUSB*/

# Serial port communication test
# WARNING: Don't just ls /dev/ttyUSB* - it crashes SSH sessions!
# Use the sys filesystem methods above instead

DRIVER COMMANDS
---------------
# Check loaded modules
lsmod | grep cp210x

# Module information
modinfo cp210x

# Reload driver (if needed)
rmmod cp210x
modprobe cp210x

GTK3 APPLICATION DEVELOPMENT
-----------------------------
# Install GTK3 development
sudo apt install libgtk-3-dev

# Compile GTK3 app
gcc myapp.c -o myapp `pkg-config --cflags --libs gtk+-3.0`

# Run GTK3 app
DISPLAY=:0 ./myapp

WEB APPLICATION DEVELOPMENT
---------------------------
# Start Python HTTP server
python3 -m http.server 8000 --bind 127.0.0.1 &

# Launch Chromium in kiosk mode
DISPLAY=:0 chromium --kiosk --no-sandbox \
  --disable-dev-shm-usage --disable-gpu \
  --use-fake-ui-for-media-stream http://127.0.0.1:8000/index.html &

# Kill Chromium
pkill chromium

VALIDATION COMMANDS
-------------------
# Run USB/RS485 validation
./usb_rs485_validator.sh

# Run with custom filename
./usb_rs485_validator.sh my_report_$(date +%Y%m%d).md

SYSTEM INFORMATION
------------------
# Kernel version
uname -r

# Full kernel info
cat /proc/version

# System uptime
uptime

# Memory info
free -h

# Disk usage
df -h

================================================================================
                    DEVELOPMENT BEST PRACTICES
================================================================================

UI DEVELOPMENT
--------------
1. Design for 800x1280 portrait orientation
2. Use touch-friendly controls (minimum 44x44 pixels)
3. Test with touch input only (no mouse hover states)
4. Prefer web apps (HTML/CSS/JS) for complex UIs
5. Use GTK3 for native Linux integration
6. NEVER use SDL2 under any circumstances

SERIAL COMMUNICATION
--------------------
1. Use ttyUSB0-3 for RS485 communication
2. Configure baud rate appropriately for your devices
3. RS485 is half-duplex - handle transmit/receive timing
4. Test with validation script before production use
5. Monitor kernel messages for errors: dmesg | grep ttyUSB

USB DEVICE HANDLING
-------------------
1. Run validation script after any hardware changes
2. Check kernel messages for enumeration issues
3. Verify driver binding in sysfs
4. CP2104 may need physical connection troubleshooting
5. USB hub has 6 free ports for expansion

PERFORMANCE CONSIDERATIONS
---------------------------
1. Wayland compositor adds some overhead
2. GPU acceleration limited (Vivante GPU)
3. Web apps via Chromium work well for complex UIs
4. Native GTK3 apps are most efficient
5. Avoid heavy graphics operations

================================================================================
                          SUPPORT & RESOURCES
================================================================================

DOCUMENTATION LOCATIONS
-----------------------
- Validation Tools: /home/CB2v4_validation/README.md
- System Description: /home/CB2v4_validation/SYSTEM_DESCRIPTION.txt (this file)
- Validation Reports: /home/CB2v4_validation/*.md

TORADEX RESOURCES
-----------------
- Torizon Documentation: https://developer.toradex.com/torizon
- Verdin iMX8M Mini: https://www.toradex.com/computer-on-modules/verdin-arm-family/nxp-imx-8m-mini-nano
- Developer Portal: https://developer.toradex.com/

DRIVER DOCUMENTATION
--------------------
- CP210x Driver: Part of Linux kernel USB serial subsystem
- Device: Silicon Labs CP2108/CP2104 USB-to-UART bridges
- Kernel module: drivers/usb/serial/cp210x.c

================================================================================
                          QUICK REFERENCE
================================================================================

SYSTEM SUMMARY
--------------
Platform: Toradex Verdin iMX8M Mini + Custom Carrier
OS: Torizon Core 6.8.1, Kernel 5.15.148
Display: 800x1280 portrait, Weston/Wayland, touch-only
Graphics: GTK3 ✅ | Web ✅ | SDL2 ❌ | OpenGL Dev ❌
Serial: 4x RS485 (ttyUSB0-3) ✅ | 4x LTE Modem (ttyUSB4-7) ✅
USB: CP2108 ✅ | USB Hub ✅ | CP2104 ⚠️ (disconnected)

DO NOT USE
----------
❌ SDL2 (causes crashes)
❌ Direct framebuffer access
❌ OpenGL/EGL development headers
❌ Direct access to /dev/ttyUSB* via ls (crashes SSH)

RECOMMENDED
-----------
✅ GTK3 for native applications
✅ HTML/CSS/JS + Chromium for complex UIs
✅ Python for scripting and web serving
✅ Wayland-native APIs
✅ sysfs for safe USB device inspection

VALIDATION STATUS (Last checked: 2025-10-13)
----------------------------------------------
✅ CP2108: OPERATIONAL (4 interfaces)
✅ USB Hub: OPERATIONAL (7 ports, 6 available)
✅ RS485: ALL 4 CHANNELS OPERATIONAL
⚠️ CP2104: DISCONNECTED (hardware issue)
✅ LTE Modem: ENUMERATED (4 serial ports)

================================================================================
                              NOTES
================================================================================

This system description should be provided to AI assistants or developers
who need to work on this platform. It contains all critical information
about hardware capabilities, limitations, and best practices.

For the most current USB/RS485 validation status, run:
    ./usb_rs485_validator.sh

Last Updated: 2025-10-13
System: CB2v4 / verdin-imx8mm-15692634
Maintained by: CB2v4 Development Team

================================================================================
                          END OF DOCUMENT
================================================================================
